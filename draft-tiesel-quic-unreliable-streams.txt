



QUIC Working Group                                             P. Tiesel
Internet-Draft                            Berlin Institute of Technology
Intended status: Informational                             June 27, 2017
Expires: December 29, 2017


             Considerations for Unreliable Streams in QUIC
              draft-tiesel-quic-unreliable-streams-latest

Abstract

   This memo outlines support for unreliable streams in QUIC.  This
   draft contains a collection of considerations and requirements for
   unreliable streams in QUIC as well as a proposal how to implement
   unreliable streams within QUIC-xx.  The intention of this document is
   to collect all unreliable streams considerations and framing till
   these can be merged in [I-D.draft-ietf-quic-transport] and [I-
   D.draft-ietf-quic-recovery]

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 29, 2017.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of



Tiesel                  Expires December 29, 2017               [Page 1]

Internet-Draft           QUIC Unreliable Streams               June 2017


   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Conventions and Definitions . . . . . . . . . . . . . . . . .   2
   2.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   3.  Connection Level Considerations . . . . . . . . . . . . . . .   2
     3.1.  Unreliable Stream Support Negotiation . . . . . . . . . .   3
   4.  Stream Level Considerations . . . . . . . . . . . . . . . . .   3
     4.1.  Stream Open . . . . . . . . . . . . . . . . . . . . . . .   3
     4.2.  Stream Close  . . . . . . . . . . . . . . . . . . . . . .   3
     4.3.  Stream ID 0x0 . . . . . . . . . . . . . . . . . . . . . .   4
   5.  Application Interface Considerations  . . . . . . . . . . . .   4
     5.1.  Retransmissions within Unreliable Streams . . . . . . . .   4
     5.2.  Presentation of Unreliable Streams  . . . . . . . . . . .   4
   6.  Security Considerations . . . . . . . . . . . . . . . . . . .   5
   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   5
   8.  Informative References  . . . . . . . . . . . . . . . . . . .   5
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   5

1.  Conventions and Definitions

   The words "MUST", "MUST NOT", "SHALL", "SHALL NOT", "SHOULD", and
   "MAY" are used in this document.  It's not shouting; when these words
   are capitalized, they have a special meaning as defined in [RFC2119].

2.  Introduction

   There are many use cases for use cases for unreliable streams,
   especially in cases where an application has to meet deadlines for
   data delivery and have to avoid head of line blocking.  But for many
   of these use cases, there is still a need to transmit some data,
   often control or meta data, reliably.

   This memo describes how QUIC can provide reliable and unreliable
   transmission within the same connection.  We advocate to allow the
   application to request reliable or unreliable transmission in QUIC on
   a per stream level.  As we do allow a QUIC implementation to
   retransmit unreliable stream frames, it is possible to implement a
   mix of reliable and unreliable transmission within the same, tagged
   unreliable, stream.

3.  Connection Level Considerations







Tiesel                  Expires December 29, 2017               [Page 2]

Internet-Draft           QUIC Unreliable Streams               June 2017


3.1.  Unreliable Stream Support Negotiation

   To keep the complexity of a minimal QUIC implementation low, the
   support of unreliable streams is optional.  An endpoint signals its
   willingness to receiving unreliable stream frames during the TLS
   handshake using the transport parameter
   accept_unreliable_stream_frames (value TBD - used as flag the same
   way as omit_connection_id specified in [I-D.draft-ietf-quic-
   transport]).

   Connections on behalf of applications that make no use of partial
   delivery of stream data should not send
   accept_unreliable_stream_frames even if the QUIC implementation
   support it.

4.  Stream Level Considerations

4.1.  Stream Open

   In addition to the stream open specified in [I-D.draft-ietf-quic-
   transport], an endpoint opening a stream MUST indicate whether the
   stream is reliable and therefore the receiver can rely on the sender
   retransmitting lost stream data.

   o  The sender opening an reliable stream must set 'R' bit of the type
      byte for a STREAM frame to 1.

   o  The sender opening an unreliable stream must set 'R' bit of the
      type byte for a STREAM frame to 0.

   A client that has not indicated its willingness to receive unreliable
   stream frames as using the transport parameter
   accept_unreliable_stream_frames MUST answer with a RST_STREAM frame
   indicating a STREAM_STATE_ERROR when receiving a STREAM frame having
   the 'R' bit not set.

   All frames of a stream MUST have the R bit to the same value.

4.2.  Stream Close

   As frames of unreliable streams may not be retransmitted, the loss of
   a unreliable stream frame carrying a FIN bit may lead result in
   ending up with zombie streams.  To prevent this this, we consider two
   design options:

   o  STREAM fames carrying the FIN bit MUST to be retransmitted if lost
      regardless whether a stream is marked reliable or not.




Tiesel                  Expires December 29, 2017               [Page 3]

Internet-Draft           QUIC Unreliable Streams               June 2017


   o  Unreliable streams have to be explicitly closed with a RST_STREAM
      or CLOSE_STREAM frame indicating the final offset of the stream.
      The the RST_STREAM frame has to be resent if lost.

   We advocate for the latter option, repurposing the FIN bit as 'R' bit
   and changing the stream close semantic to the following:

   o  Once an endpoint has completed sending all stream data, it sends a
      RST_STREAM frame with error code NO_ERROR.  The stream state
      becomes "half-closed (local).

   o  A stream in state 'open' for which a RST_STREAM frame with error
      code NO_ERROR is received, transitions to "half-closed (remote)"
      state.  An endpoint could continue receiving frames for the stream
      if not all data advertised in 'Final Offset' was received.

   This reduces the code paths that cause state transitions from open to
   half-closed and eases state keeping for unreliable streams by having
   reliable signaling of closing unreliable stream.  It comes with the
   caveat of increasing the minimal on-wire data of a stream by 16
   bytes.  Renaming RST_STREAM to CLOSE_STREAM might be useful to avoid
   confusion.

4.3.  Stream ID 0x0

   Data of stream 0x0 MUST be transmitted reliably as TLS expects
   reliable transmission.

5.  Application Interface Considerations

5.1.  Retransmissions within Unreliable Streams

   While unreliable streams suggest just disabling retransmissions for
   these streams, applications my choose to apply arbitrary
   retransmission strategies for unreliable streams, e.g. retransmit
   stream data as long it will likely be delivered on-time with respect
   to an application provided deadline or only retransmit certain byte
   ranges.

   An QUIC implementation that implements retransmissions on a per-
   packet basis therefore may retransmit unreliable stream data even if
   not requested by the application.

5.2.  Presentation of Unreliable Streams

   The presentation of unreliable streams is application specific.





Tiesel                  Expires December 29, 2017               [Page 4]

Internet-Draft           QUIC Unreliable Streams               June 2017


   The anticipated use cases include: - Data being delivered annotated
   with its offset as it is received.  - Data being delivered after a
   deadline, e.g. with an annotated list of holes and byte ranges of
   lost data filled with zeros.

6.  Security Considerations

   TBD

7.  IANA Considerations

   TBD

8.  Informative References

   [I-D.draft-ietf-quic-applicability-00]
              Kuehlewind, M. and B. Trammell, "Applicability of the QUIC
              Transport Protocol", draft-ietf-quic-applicability-00
              (work in progress), July 2017.

   [I-D.draft-ietf-quic-recovery-04]
              Iyengar, J. and I. Swett, "QUIC Loss Detection and
              Congestion Control", draft-ietf-quic-recovery-04 (work in
              progress), June 2017.

   [I-D.draft-ietf-quic-transport-04]
              Iyengar, J. and M. Thomson, "QUIC: A UDP-Based Multiplexed
              and Secure Transport", draft-ietf-quic-transport-04 (work
              in progress), June 2017.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

Author's Address

   Philipp S. Tiesel
   Berlin Institute of Technology
   Marchstr. 23
   Berlin
   Germany

   Email: philipp@inet.tu-berlin.de







Tiesel                  Expires December 29, 2017               [Page 5]
